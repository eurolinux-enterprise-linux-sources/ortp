diff --git a/src/stun.c b/src/stun.c
index 523c19b..b64fd3e 100644
--- a/src/stun.c
+++ b/src/stun.c
@@ -791,195 +791,219 @@ stunParseMessage( char* buf, unsigned int bufLen, StunMessage *msg)
    return TRUE;
 }
 
+static char* memcpy_check(char*dst, size_t*remaining, const void*src, size_t len)
+{
+	if( dst && remaining
+			&& (*remaining != -1) // -1 symbolizes a previous error
+			&& (*remaining >= len) ){
+		memcpy(dst, src, len);
+		*remaining -= len;
+		return dst + len;
+	} else {
+		if( remaining ) // return -1 to hint an error
+			*remaining = (size_t)-1;
+		return dst;
+	}
+}
 
-static char* 
-encode16(char* buf, uint16_t data)
+static char*
+encode16(char* buf, size_t*remaining, uint16_t data)
 {
    uint16_t ndata = htons(data);
-   memcpy(buf, &ndata, sizeof(uint16_t));
-   return buf + sizeof(uint16_t);
+   return memcpy_check(buf, remaining, &ndata, sizeof(uint16_t));
 }
 
-static char* 
-encode32(char* buf, uint32_t data)
+static char*
+encode32(char* buf, size_t*remaining, uint32_t data)
 {
    uint32_t ndata = htonl(data);
-   memcpy(buf, &ndata, sizeof(uint32_t));
-   return buf + sizeof(uint32_t);
+   return memcpy_check(buf, remaining, &ndata, sizeof(uint32_t));
 }
 
-static char* 
-encode64(char* buf, uint64_t data)
+static char*
+encode64(char* buf, size_t* remaining, uint64_t data)
 {
    uint64_t ndata = htonq(data);
-   memcpy(buf, &ndata, sizeof(uint64_t));
-   return buf + sizeof(uint64_t);
+   return memcpy_check(buf, remaining, &ndata, sizeof(uint64_t));
 }
 
-static char* 
-encode(char* buf, const char* data, unsigned int length)
+static char*
+encode(char* buf, size_t* remaining, const char* data, unsigned int length)
 {
-   memcpy(buf, data, length);
-   return buf + length;
+   return memcpy_check(buf, remaining, data, length);
 }
 
 
-static char* 
-encodeAtrAddress4(char* ptr, uint16_t type, const StunAtrAddress4 *atr)
+static char*
+encodeAtrAddress4(char* ptr, size_t* remaining, uint16_t type, const StunAtrAddress4 *atr)
 {
-   ptr = encode16(ptr, type);
-   ptr = encode16(ptr, 8);
-   *ptr++ = atr->pad;
-   *ptr++ = IPv4Family;
-   ptr = encode16(ptr, atr->ipv4.port);
-   ptr = encode32(ptr, atr->ipv4.addr);
-	
-   return ptr;
+
+	ptr = encode16(ptr, remaining, type);
+	ptr = encode16(ptr, remaining, 8);
+	if(*remaining >= 2 ){
+		*ptr++ = atr->pad;
+		*ptr++ = IPv4Family;
+	}
+	ptr = encode16(ptr, remaining, atr->ipv4.port);
+	ptr = encode32(ptr, remaining, atr->ipv4.addr);
+
+	return ptr;
 }
 
-static char* 
-encodeAtrChangeRequest(char* ptr, const StunAtrChangeRequest *atr)
+static char*
+encodeAtrChangeRequest(char* ptr, size_t* remaining, const StunAtrChangeRequest *atr)
 {
-   ptr = encode16(ptr, SA_CHANGEREQUEST);
-   ptr = encode16(ptr, 4);
-   ptr = encode32(ptr, atr->value);
+   ptr = encode16(ptr, remaining, SA_CHANGEREQUEST);
+   ptr = encode16(ptr, remaining, 4);
+   ptr = encode32(ptr, remaining, atr->value);
    return ptr;
 }
 
-static char* 
-encodeAtrError(char* ptr, const StunAtrError *atr)
+static char*
+encodeAtrError(char* ptr, size_t* remaining, const StunAtrError *atr)
 {
-   int padding;
-   int i;
-
-   ptr = encode16(ptr, SA_ERRORCODE);
-   ptr = encode16(ptr, 4 + atr->sizeReason);
-   ptr = encode16(ptr, atr->pad);
-   *ptr++ = atr->errorClass;
-   *ptr++ = atr->number;
-   ptr = encode(ptr, atr->reason, atr->sizeReason);
+	int padding;
+	int i;
+
+	ptr = encode16(ptr, remaining, SA_ERRORCODE);
+	ptr = encode16(ptr, remaining, 4 + atr->sizeReason);
+	ptr = encode16(ptr, remaining, atr->pad);
+	if( *remaining >= 2 ){
+		*ptr++ = atr->errorClass;
+		*ptr++ = atr->number;
+	}
+	ptr = encode(ptr, remaining, atr->reason, atr->sizeReason);
 
-   padding = (atr->sizeReason+4) % 4;
-   if (padding>0)
-   {
-     for (i=0;i<4-padding;i++)
-     {
-       *ptr++ = 0;
-     }
-   }
-   return ptr;
+	padding = (atr->sizeReason+4) % 4;
+	if ( padding>0 )
+	{
+		if(*remaining >= 4-padding){
+			for(i=0;i<4-padding;i++) {
+				*ptr++ = 0;
+			}
+		} else {
+			*remaining = (size_t)-1;
+		}
+	}
+	return ptr;
 }
 
 
-static char* 
-encodeAtrUnknown(char* ptr, const StunAtrUnknown *atr)
+static char*
+encodeAtrUnknown(char* ptr, size_t* remaining, const StunAtrUnknown *atr)
 {
    int i;
-   ptr = encode16(ptr, SA_UNKNOWNATTRIBUTE);
-   ptr = encode16(ptr, 2+2*atr->numAttributes);
-   for (i=0; i<atr->numAttributes; i++)
-   {
-      ptr = encode16(ptr, atr->attrType[i]);
+   ptr = encode16(ptr, remaining, SA_UNKNOWNATTRIBUTE);
+   ptr = encode16(ptr, remaining, 2+2*atr->numAttributes);
+   for (i=0; i<atr->numAttributes; i++){
+	  ptr = encode16(ptr, remaining, atr->attrType[i]);
    }
    return ptr;
 }
 
-static char* 
-encodeAtrString(char* ptr, uint16_t type, const StunAtrString *atr)
+static char*
+encodeAtrString(char* ptr, size_t* remaining, uint16_t type, const StunAtrString *atr)
 {
    int padding;
    int i;
-	
-   ptr = encode16(ptr, type);
-   ptr = encode16(ptr, atr->sizeValue);
-   ptr = encode(ptr, atr->value, atr->sizeValue);
+
+   ptr = encode16(ptr, remaining, type);
+   ptr = encode16(ptr, remaining, atr->sizeValue);
+   ptr = encode(ptr, remaining, atr->value, atr->sizeValue);
 
    padding = atr->sizeValue % 4;
-   if (padding>0)
-   {
-     for (i=0;i<4-padding;i++)
-     {
-       *ptr++ = 0;
-     }
+   if ( padding>0 )
+   {
+	   if(*remaining >= 4-padding){
+		   for(i=0;i<4-padding;i++) {
+			   *ptr++ = 0;
+		   }
+	   } else {
+		   *remaining = (size_t)-1;
+	   }
    }
    return ptr;
 }
 
 
-static char* 
-encodeAtrIntegrity(char* ptr, const StunAtrIntegrity *atr)
+static char*
+encodeAtrIntegrity(char* ptr, size_t* remaining, const StunAtrIntegrity *atr)
 {
-   ptr = encode16(ptr, SA_MESSAGEINTEGRITY);
-   ptr = encode16(ptr, 20);
-   ptr = encode(ptr, atr->hash, sizeof(atr->hash));
+   ptr = encode16(ptr, remaining, SA_MESSAGEINTEGRITY);
+   ptr = encode16(ptr, remaining, 20);
+   ptr = encode(ptr, remaining, atr->hash, sizeof(atr->hash));
    return ptr;
 }
 
 static char*
-encodeAtrFingerprint(char* ptr, const StunAtrFingerprint *atr)
+encodeAtrFingerprint(char* ptr, size_t* remaining, const StunAtrFingerprint *atr)
 {
 	uint32_t val;
-	ptr = encode16(ptr, SA_FINGERPRINT);
-	ptr = encode16(ptr, 4);
+	ptr = encode16(ptr, remaining, SA_FINGERPRINT);
+	ptr = encode16(ptr, remaining, 4);
 
 	val = atr->fingerprint;
 	val ^= 0x5354554E;
-	ptr = encode32(ptr, val);
+	ptr = encode32(ptr, remaining, val);
 	return ptr;
 }
 
-static char* 
-encodeAtrRequestedTransport(char* ptr, const TurnAtrRequestedTransport *atr)
+static char*
+encodeAtrRequestedTransport(char* ptr, size_t* remaining, const TurnAtrRequestedTransport *atr)
 {
-   ptr = encode16(ptr, TA_REQUESTEDTRANSPORT);
-   ptr = encode16(ptr, 4);
-   *ptr++ = atr->proto;
-   *ptr++ = atr->pad1;
-   *ptr++ = atr->pad2;
-   *ptr++ = atr->pad3;
-   return ptr;
+	ptr = encode16(ptr, remaining, TA_REQUESTEDTRANSPORT);
+	ptr = encode16(ptr, remaining, 4);
+	if( *remaining >= 4 ){
+		*ptr++ = atr->proto;
+		*ptr++ = atr->pad1;
+		*ptr++ = atr->pad2;
+		*ptr++ = atr->pad3;
+	} else {
+		*remaining = (size_t)-1;
+	}
+	return ptr;
 }
 
-static char* 
-encodeAtrLifeTime(char* ptr, const TurnAtrLifetime *atr)
+static char*
+encodeAtrLifeTime(char* ptr, size_t* remaining, const TurnAtrLifetime *atr)
 {
-   ptr = encode16(ptr, TA_LIFETIME);
-   ptr = encode16(ptr, 4);
-   ptr = encode32(ptr, atr->lifetime);
+   ptr = encode16(ptr, remaining, TA_LIFETIME);
+   ptr = encode16(ptr, remaining, 4);
+   ptr = encode32(ptr, remaining, atr->lifetime);
    return ptr;
 }
 
-static char* 
-encodeAtrDontFragment(char* ptr)
+static char*
+encodeAtrDontFragment(char* ptr, size_t* remaining)
 {
-   ptr = encode16(ptr, TA_DONTFRAGMENT);
-   ptr = encode16(ptr, 0);
+   ptr = encode16(ptr, remaining, TA_DONTFRAGMENT);
+   ptr = encode16(ptr, remaining, 0);
    return ptr;
 }
 
-static char* 
-encodeAtrUseCandidate(char* ptr)
+static char*
+encodeAtrUseCandidate(char* ptr, size_t* remaining)
 {
-   ptr = encode16(ptr, ICEA_USECANDIDATE);
-   ptr = encode16(ptr, 0);
+   ptr = encode16(ptr, remaining, ICEA_USECANDIDATE);
+   ptr = encode16(ptr, remaining, 0);
    return ptr;
 }
 
-static char* 
-encodeAtrPriority(char* ptr, const IceAtrPriority *atr)
+static char*
+encodeAtrPriority(char* ptr, size_t* remaining, const IceAtrPriority *atr)
 {
-   ptr = encode16(ptr, ICEA_PRIORITY);
-   ptr = encode16(ptr, 4);
-   ptr = encode32(ptr, atr->priority);
+   ptr = encode16(ptr, remaining, ICEA_PRIORITY);
+   ptr = encode16(ptr, remaining, 4);
+   ptr = encode32(ptr, remaining, atr->priority);
    return ptr;
 }
 
-static char* 
-encodeAtrIceControll(char* ptr, uint16_t type, const IceAtrIceControll *atr)
+static char*
+encodeAtrIceControll(char* ptr, size_t* remaining, uint16_t type, const IceAtrIceControll *atr)
 {
-   ptr = encode16(ptr, type);
-   ptr = encode16(ptr, 8);
-   ptr = encode64(ptr, atr->value);
+   ptr = encode16(ptr, remaining, type);
+   ptr = encode16(ptr, remaining, 8);
+   ptr = encode64(ptr, remaining, atr->value);
    return ptr;
 }
 
@@ -991,163 +1015,175 @@ stunEncodeMessage( const StunMessage *msg,
 {
    char* ptr = buf;
    char* lengthp;
-   ptr = encode16(ptr, msg->msgHdr.msgType);
+   size_t remaining = bufLen;
+
+   ptr = encode16(ptr, &remaining, msg->msgHdr.msgType);
    lengthp = ptr;
-   ptr = encode16(ptr, 0);
-   ptr = encode32(ptr, msg->msgHdr.magic_cookie);
-   ptr = encode(ptr, (const char*)msg->msgHdr.tr_id.octet, sizeof(msg->msgHdr.tr_id));
-	
+   ptr = encode16(ptr, &remaining, 0);
+   ptr = encode32(ptr, &remaining, msg->msgHdr.magic_cookie);
+   ptr = encode(ptr, &remaining, (const char*)msg->msgHdr.tr_id.octet, sizeof(msg->msgHdr.tr_id));
+
    ortp_debug("stun: Encoding stun message: ");
 
-   if (msg->hasRequestedTransport)
+   if ((remaining != -1 ) && msg->hasRequestedTransport)
    {
-      ortp_debug("stun: Encoding TA_REQUESTEDTRANSPORT: %i\n", msg->requestedTransport.proto );
-      ptr = encodeAtrRequestedTransport (ptr, &msg->requestedTransport);
+	  ortp_debug("stun: Encoding TA_REQUESTEDTRANSPORT: %i\n", msg->requestedTransport.proto );
+	  ptr = encodeAtrRequestedTransport (ptr, &remaining, &msg->requestedTransport);
    }
-   if (msg->hasLifetimeAttributes)
+   if ((remaining != -1 ) && msg->hasLifetimeAttributes)
    {
-      ortp_debug("stun: Encoding TA_LIFETIME: %i\n", msg->lifetimeAttributes.lifetime );
-      ptr = encodeAtrLifeTime (ptr, &msg->lifetimeAttributes);
+	  ortp_debug("stun: Encoding TA_LIFETIME: %i\n", msg->lifetimeAttributes.lifetime );
+	  ptr = encodeAtrLifeTime (ptr, &remaining, &msg->lifetimeAttributes);
    }
-   if (msg->hasDontFragment)
+   if ((remaining != -1 ) && msg->hasDontFragment)
    {
-      ortp_debug("stun: Encoding TA_DONTFRAGMENT: DF\n");
-      ptr = encodeAtrDontFragment (ptr);
-   }		  
-   if (msg->hasMappedAddress)
+	  ortp_debug("stun: Encoding TA_DONTFRAGMENT: DF\n");
+	  ptr = encodeAtrDontFragment (ptr, &remaining);
+   }
+   if ((remaining != -1 ) && msg->hasMappedAddress)
    {
-      ortp_debug("stun: Encoding SA_MAPPEDADDRESS: %s\n", ipaddr(&msg->mappedAddress.ipv4) );
-      ptr = encodeAtrAddress4 (ptr, SA_MAPPEDADDRESS, &msg->mappedAddress);
+	  ortp_debug("stun: Encoding SA_MAPPEDADDRESS: %s\n", ipaddr(&msg->mappedAddress.ipv4) );
+	  ptr = encodeAtrAddress4 (ptr, &remaining, SA_MAPPEDADDRESS, &msg->mappedAddress);
    }
-   if (msg->hasResponseAddress)
+   if ((remaining != -1 ) && msg->hasResponseAddress)
    {
-      ortp_debug("stun: Encoding SA_RESPONSEADDRESS: %s\n", ipaddr(&msg->responseAddress.ipv4) );
-      ptr = encodeAtrAddress4(ptr, SA_RESPONSEADDRESS, &msg->responseAddress);
+	  ortp_debug("stun: Encoding SA_RESPONSEADDRESS: %s\n", ipaddr(&msg->responseAddress.ipv4) );
+	  ptr = encodeAtrAddress4(ptr, &remaining, SA_RESPONSEADDRESS, &msg->responseAddress);
    }
-   if (msg->hasChangeRequest)
+   if ((remaining != -1 ) && msg->hasChangeRequest)
    {
-      ortp_debug("stun: Encoding SA_CHANGEREQUEST: %i\n", msg->changeRequest.value );
-      ptr = encodeAtrChangeRequest(ptr, &msg->changeRequest);
+	  ortp_debug("stun: Encoding SA_CHANGEREQUEST: %i\n", msg->changeRequest.value );
+	  ptr = encodeAtrChangeRequest(ptr, &remaining, &msg->changeRequest);
    }
-   if (msg->hasSourceAddress)
+   if ((remaining != -1 ) && msg->hasSourceAddress)
    {
-      ortp_debug("stun: Encoding SA_SOURCEADDRESS: %s\n", ipaddr(&msg->sourceAddress.ipv4) );
-      ptr = encodeAtrAddress4(ptr, SA_SOURCEADDRESS, &msg->sourceAddress);
+	  ortp_debug("stun: Encoding SA_SOURCEADDRESS: %s\n", ipaddr(&msg->sourceAddress.ipv4) );
+	  ptr = encodeAtrAddress4(ptr, &remaining, SA_SOURCEADDRESS, &msg->sourceAddress);
    }
-   if (msg->hasChangedAddress)
+   if ((remaining != -1 ) && msg->hasChangedAddress)
    {
-      ortp_debug("stun: Encoding SA_CHANGEDADDRESS: %s\n", ipaddr(&msg->changedAddress.ipv4) );
-      ptr = encodeAtrAddress4(ptr, SA_CHANGEDADDRESS, &msg->changedAddress);
+	  ortp_debug("stun: Encoding SA_CHANGEDADDRESS: %s\n", ipaddr(&msg->changedAddress.ipv4) );
+	  ptr = encodeAtrAddress4(ptr, &remaining, SA_CHANGEDADDRESS, &msg->changedAddress);
    }
-   if (msg->hasUsername)
+   if ((remaining != -1 ) && msg->hasUsername)
    {
-      ortp_debug("stun: Encoding SA_USERNAME: %s\n", msg->username.value );
-      ptr = encodeAtrString(ptr, SA_USERNAME, &msg->username);
+	  ortp_debug("stun: Encoding SA_USERNAME: %s\n", msg->username.value );
+	  ptr = encodeAtrString(ptr, &remaining, SA_USERNAME, &msg->username);
    }
    //if (msg->hasPassword)
    //{
    //   ortp_debug("stun: Encoding SA_PASSWORD: %s\n", msg->password.value );
    //   ptr = encodeAtrString(ptr, SA_PASSWORD, &msg->password);
    //}
-   if (msg->hasErrorCode)
+   if ((remaining != -1 ) && msg->hasErrorCode)
    {
-      ortp_debug("stun: Encoding SA_ERRORCODE: class=%i number=%i reason=%s\n" 
-                          , msg->errorCode.errorClass 
-                          , msg->errorCode.number
-                          , msg->errorCode.reason );
-      
-      ptr = encodeAtrError(ptr, &msg->errorCode);
+	  ortp_debug("stun: Encoding SA_ERRORCODE: class=%i number=%i reason=%s\n"
+						  , msg->errorCode.errorClass
+						  , msg->errorCode.number
+						  , msg->errorCode.reason );
+
+	  ptr = encodeAtrError(ptr, &remaining, &msg->errorCode);
    }
-   if (msg->hasUnknownAttributes)
+   if ((remaining != -1 ) && msg->hasUnknownAttributes)
    {
-      ortp_debug("stun: Encoding SA_UNKNOWNATTRIBUTE: ???");
-      ptr = encodeAtrUnknown(ptr, &msg->unknownAttributes);
+	  ortp_debug("stun: Encoding SA_UNKNOWNATTRIBUTE: ???");
+	  ptr = encodeAtrUnknown(ptr, &remaining, &msg->unknownAttributes);
    }
-   if (msg->hasReflectedFrom)
+   if ((remaining != -1 ) && msg->hasReflectedFrom)
    {
-      ortp_debug("stun: Encoding SA_REFLECTEDFROM: %s\n", ipaddr(&msg->reflectedFrom.ipv4) );
-      ptr = encodeAtrAddress4(ptr, SA_REFLECTEDFROM, &msg->reflectedFrom);
+	  ortp_debug("stun: Encoding SA_REFLECTEDFROM: %s\n", ipaddr(&msg->reflectedFrom.ipv4) );
+	  ptr = encodeAtrAddress4(ptr, &remaining, SA_REFLECTEDFROM, &msg->reflectedFrom);
    }
-   if (msg->hasNonce)
+   if ((remaining != -1 ) && msg->hasNonce)
    {
-      ortp_debug("stun: Encoding SA_NONCE: %s\n", msg->nonceName.value );
-      ptr = encodeAtrString(ptr, SA_NONCE, &msg->nonceName);
+	  ortp_debug("stun: Encoding SA_NONCE: %s\n", msg->nonceName.value );
+	  ptr = encodeAtrString(ptr, &remaining, SA_NONCE, &msg->nonceName);
    }
-   if (msg->hasRealm)
+   if ((remaining != -1 ) && msg->hasRealm)
    {
-      ortp_debug("stun: Encoding SA_REALM: %s\n", msg->realmName.value );
-      ptr = encodeAtrString(ptr, SA_REALM, &msg->realmName);
+	  ortp_debug("stun: Encoding SA_REALM: %s\n", msg->realmName.value );
+	  ptr = encodeAtrString(ptr, &remaining, SA_REALM, &msg->realmName);
    }
-   
-   if (msg->hasXorMappedAddress)
+
+   if ((remaining != -1 ) && msg->hasXorMappedAddress)
    {
-      ortp_debug("stun: Encoding SA_XORMAPPEDADDRESS: %s\n", ipaddr(&msg->xorMappedAddress.ipv4) );
-      ptr = encodeAtrAddress4 (ptr, SA_XORMAPPEDADDRESS, &msg->xorMappedAddress);
+	  ortp_debug("stun: Encoding SA_XORMAPPEDADDRESS: %s\n", ipaddr(&msg->xorMappedAddress.ipv4) );
+	  ptr = encodeAtrAddress4 (ptr, &remaining, SA_XORMAPPEDADDRESS, &msg->xorMappedAddress);
    }
-   
-   if (msg->hasPriority)
-   {	   
-      ortp_debug("stun: Encoding ICEA_PRIORITY\n");
-      ptr = encodeAtrPriority (ptr, &msg->priority);
+
+   if ((remaining != -1 ) && msg->hasPriority)
+   {
+	  ortp_debug("stun: Encoding ICEA_PRIORITY\n");
+	  ptr = encodeAtrPriority (ptr, &remaining, &msg->priority);
    }
-   if (msg->hasUseCandidate)
-   {	   
-      ortp_debug("stun: Encoding ICEA_USECANDIDATE\n");
-      ptr = encodeAtrUseCandidate (ptr);
+   if ((remaining != -1 ) && msg->hasUseCandidate)
+   {
+	  ortp_debug("stun: Encoding ICEA_USECANDIDATE\n");
+	  ptr = encodeAtrUseCandidate (ptr, &remaining );
    }
-   if (msg->hasIceControlled)
-   {	   
-      ortp_debug("stun: Encoding ICEA_ICECONTROLLED\n");
-      ptr = encodeAtrIceControll (ptr, ICEA_ICECONTROLLED, &msg->iceControlled);
+   if ((remaining != -1 ) && msg->hasIceControlled)
+   {
+	  ortp_debug("stun: Encoding ICEA_ICECONTROLLED\n");
+	  ptr = encodeAtrIceControll (ptr, &remaining, ICEA_ICECONTROLLED, &msg->iceControlled);
    }
-   if (msg->hasIceControlling)
-   {	   
-      ortp_debug("stun: Encoding ICEA_ICECONTROLLING\n");
-      ptr = encodeAtrIceControll (ptr, ICEA_ICECONTROLLING, &msg->iceControlling);
+   if ((remaining != -1 ) && msg->hasIceControlling)
+   {
+	  ortp_debug("stun: Encoding ICEA_ICECONTROLLING\n");
+	  ptr = encodeAtrIceControll (ptr, &remaining, ICEA_ICECONTROLLING, &msg->iceControlling);
    }
 
-   if (msg->hasSoftware)
+   if ((remaining != -1 ) && msg->hasSoftware)
    {
-      ortp_debug("stun: Encoding SA_SOFTWARE: %s\n", msg->softwareName.value );
-      ptr = encodeAtrString(ptr, SA_SOFTWARE, &msg->softwareName);
+	  ortp_debug("stun: Encoding SA_SOFTWARE: %s\n", msg->softwareName.value );
+	  ptr = encodeAtrString(ptr, &remaining, SA_SOFTWARE, &msg->softwareName);
    }
 
-   if (msg->hasMessageIntegrity
-     &&password!=NULL && password->sizeValue > 0
-     &&msg->username.sizeValue>0
-     &&msg->realmName.sizeValue>0)
+   if ((remaining != -1 ) && msg->hasMessageIntegrity
+		   && password!=NULL && password->sizeValue > 0
+		   && msg->username.sizeValue>0
+		   && msg->realmName.sizeValue>0)
    {
-      StunAtrIntegrity integrity;
-      //ortp_debug("stun: HMAC with password: %s\n", password->value );
+	  StunAtrIntegrity integrity;
+	  //ortp_debug("stun: HMAC with password: %s\n", password->value );
 
-      encode16(lengthp, (uint16_t)(ptr - buf - sizeof(StunMsgHdr)+24));
-      stunCalculateIntegrity_longterm(integrity.hash, buf, (int)(ptr-buf) ,
-        msg->username.value, msg->realmName.value, password->value);
-      ptr = encodeAtrIntegrity(ptr, &integrity);
+	  encode16(lengthp, &remaining, (uint16_t)(ptr - buf - sizeof(StunMsgHdr)+24));
+	  stunCalculateIntegrity_longterm(integrity.hash, buf, (int)(ptr-buf) ,
+		msg->username.value, msg->realmName.value, password->value);
+	  ptr = encodeAtrIntegrity(ptr, &remaining, &integrity);
    }
-   else if (msg->hasMessageIntegrity
-     &&password!=NULL && password->sizeValue > 0
-     &&msg->username.sizeValue>0)
+   else if ((remaining != -1 )
+			&& msg->hasMessageIntegrity
+			&& password!=NULL
+			&& password->sizeValue > 0
+			&& msg->username.sizeValue>0)
    {
-      StunAtrIntegrity integrity;
-      //ortp_debug("stun: HMAC with password: %s\n", password->value );
+	  StunAtrIntegrity integrity;
+	  //ortp_debug("stun: HMAC with password: %s\n", password->value );
 
-      encode16(lengthp, (uint16_t)(ptr - buf - sizeof(StunMsgHdr)+24));
-      stunCalculateIntegrity_shortterm(integrity.hash, buf, (int)(ptr-buf) ,
-        password->value);
-      ptr = encodeAtrIntegrity(ptr, &integrity);
+	  encode16(lengthp, &remaining, (uint16_t)(ptr - buf - sizeof(StunMsgHdr)+24));
+	  stunCalculateIntegrity_shortterm(integrity.hash, buf, (int)(ptr-buf) ,
+		password->value);
+	  ptr = encodeAtrIntegrity(ptr, &remaining, &integrity);
    }
 
-   if (msg->hasFingerprint)
+   if ((remaining != -1 ) && msg->hasFingerprint)
    {
-      StunAtrFingerprint fingerprint;
-      //ortp_debug("stun: HMAC with password: %s\n", password->value );
+	  StunAtrFingerprint fingerprint;
+	  //ortp_debug("stun: HMAC with password: %s\n", password->value );
 
-      encode16(lengthp, (uint16_t)(ptr - buf - sizeof(StunMsgHdr)+8));
-      fingerprint.fingerprint = stunCalculateFingerprint(buf, (int)(ptr-buf));
-      ptr = encodeAtrFingerprint(ptr, &fingerprint);
+	  encode16(lengthp, &remaining, (uint16_t)(ptr - buf - sizeof(StunMsgHdr)+8));
+	  fingerprint.fingerprint = stunCalculateFingerprint(buf, (int)(ptr-buf));
+	  ptr = encodeAtrFingerprint(ptr, &remaining, &fingerprint);
    }
-   encode16(lengthp, (uint16_t)(ptr - buf - sizeof(StunMsgHdr)));
+   encode16(lengthp, &remaining, (uint16_t)(ptr - buf - sizeof(StunMsgHdr)));
+
+   if( remaining == -1 )
+   {
+	   ortp_error("stunEncodeMessage: input buffer too small (%u)", bufLen);
+	   memset(buf, 0x0, bufLen);
+	   return 0;
+   }
+
    return (int)(ptr - buf);
 }
 
